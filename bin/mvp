#!/usr/bin/env ruby

command = ARGV[0]

error(%%
No command specified, please use one of the following
  new:     start a new project
  update:  update mvp inside current project
%) unless command

case command.downcase
when 'new'
  project = if ARGV[1]
    ARGV[1]
  else
    $stdin.reopen(File.open("/dev/tty", "r"))
    print "Project name? "
    STDIN.gets.chomp
  end

  error('Must specify a project name') if project == ""

  slug = slugify(project)

  puts
  run "cp -r #{File.dirname(__FILE__)}/../project #{slug}"

  puts
  puts "\n== Initializing Project =="
  files = Dir.glob("#{slug}/**/*").select { |f| File.file?(f) }
  files.each do |file_name|
    begin
      text = File.read(file_name)
      new_contents = text.gsub(/__PROJECT_NAME__/, project)
                         .gsub(/__PROJECT_NAME_SLUG__/, slug)

      File.open(file_name, "w") {|file| file.puts new_contents }
    rescue

    end
  end
  run "cd #{slug} && rm -rf .git && git init"

  run "cd #{slug}; bin/setup", "\n== Project Setup"

when 'update'
  run "bundle update mvpkit"
  # npm has a bug where it won't update new dependencies
  # https://github.com/npm/npm/issues/1341
  # run "rm -rf node_modules; yarn"
when '-v','version'
  version = File.read(File.dirname(__FILE__) + '/../VERSION')
  puts "Version #{version}"
end

BEGIN {
  def slugify(name)
    slug = name.gsub(/'/, '').gsub(/[^a-z0-9]+/, '_')
    slug.chop! if slug[-1] == '-'
    slug
  end

  def error(message)
    puts
    puts "Error: #{message}"
    exit 1
  end

  def run(cmd, message=nil)
    if message
      puts
      puts message
    end

    system cmd
  end
}
